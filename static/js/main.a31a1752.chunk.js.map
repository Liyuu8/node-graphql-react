{"version":3,"sources":["components/Header.js","queries/queries.js","components/SideNav.js","components/MovieList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","color","className","NavbarBrand","href","MOVIE_LIST","gql","DIRECTOR_LIST","ADD_MOVIE","ADD_DIRECTOR","DELETE_MOVIE","SideNav","data","useQuery","useForm","registerMovie","register","handleSubmitMovie","handleSubmit","registerDirector","handleSubmitDirector","useMutation","refetchQueries","query","awaitRefetchQueries","addMovie","addDirector","Card","CardHeader","CardBody","Form","onSubmit","e","directorName","directorAge","variables","name","age","parseInt","target","reset","FormGroup","type","placeholder","ref","Button","movieName","movieGenre","directorId","genre","directors","map","id","value","MovieList","loading","error","deleteMovie","Table","hover","colSpan","movies","director","onClick","handleDeleteMovie","client","ApolloClient","uri","App","Container","Row","Col","xs","sm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a31a1752.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\n\nconst Header = () => (\n  <Navbar color=\"primary\" className=\"mb-4\">\n    <NavbarBrand href=\"/\">Movie List</NavbarBrand>\n  </Navbar>\n);\n\nexport default Header;\n","import { gql } from 'apollo-boost';\n\nexport const MOVIE_LIST = gql`\n  {\n    movies {\n      id\n      name\n      genre\n      director {\n        name\n      }\n    }\n  }\n`;\n\nexport const DIRECTOR_LIST = gql`\n  {\n    directors {\n      id\n      name\n    }\n  }\n`;\n\nexport const ADD_MOVIE = gql`\n  mutation($name: String!, $genre: String!, $directorId: ID!) {\n    addMovie(name: $name, genre: $genre, directorId: $directorId) {\n      name\n      genre\n    }\n  }\n`;\n\nexport const ADD_DIRECTOR = gql`\n  mutation($name: String!, $age: Int!) {\n    addDirector(name: $name, age: $age) {\n      name\n      age\n    }\n  }\n`;\n\nexport const DELETE_MOVIE = gql`\n  mutation($id: ID!) {\n    deleteMovie(id: $id) {\n      id\n    }\n  }\n`;\n","import React from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useForm } from 'react-hook-form';\nimport {\n  DIRECTOR_LIST,\n  ADD_MOVIE,\n  MOVIE_LIST,\n  ADD_DIRECTOR,\n} from '../queries/queries';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Form,\n  FormGroup,\n} from 'reactstrap';\n\nconst SideNav = () => {\n  // https://sbfl.net/blog/2019/08/26/javascript-bracketed-variables/\n  const { data } = useQuery(DIRECTOR_LIST);\n  const {\n    register: registerMovie,\n    handleSubmit: handleSubmitMovie,\n  } = useForm();\n  const {\n    register: registerDirector,\n    handleSubmit: handleSubmitDirector,\n  } = useForm();\n  const [addMovie] = useMutation(ADD_MOVIE, {\n    refetchQueries: [{ query: MOVIE_LIST }],\n    awaitRefetchQueries: true,\n  });\n  const [addDirector] = useMutation(ADD_DIRECTOR, {\n    refetchQueries: [{ query: DIRECTOR_LIST }],\n    awaitRefetchQueries: true,\n  });\n  const onSubmitMovie = ({ movieName, movieGenre, directorId }, e) => {\n    addMovie({ variables: { name: movieName, genre: movieGenre, directorId } });\n    e.target.reset();\n  };\n  const onSubmitDirector = ({ directorName, directorAge }, e) => {\n    addDirector({\n      variables: { name: directorName, age: parseInt(directorAge) },\n    });\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      {/* 入力フォーム（映画監督） */}\n      <Card>\n        <CardHeader>映画監督</CardHeader>\n        <CardBody>\n          <Form onSubmit={handleSubmitDirector(onSubmitDirector)}>\n            <FormGroup>\n              <input\n                type=\"text\"\n                name=\"directorName\"\n                className=\"form-control\"\n                placeholder=\"監督名\"\n                ref={registerDirector}\n              />\n            </FormGroup>\n            <FormGroup>\n              <input\n                type=\"number\"\n                name=\"directorAge\"\n                className=\"form-control\"\n                placeholder=\"年齢\"\n                ref={registerDirector}\n              />\n            </FormGroup>\n            <Button color=\"primary\" type=\"submit\">\n              追加\n            </Button>\n          </Form>\n        </CardBody>\n      </Card>\n\n      {/* 入力フォーム（映画作品） */}\n      <Card className=\"mt-4\">\n        <CardHeader>映画作品</CardHeader>\n        <CardBody>\n          <Form onSubmit={handleSubmitMovie(onSubmitMovie)}>\n            <FormGroup>\n              <input\n                type=\"text\"\n                name=\"movieName\"\n                className=\"form-control\"\n                placeholder=\"タイトル\"\n                ref={registerMovie}\n              />\n            </FormGroup>\n            <FormGroup>\n              <input\n                type=\"text\"\n                name=\"movieGenre\"\n                className=\"form-control\"\n                placeholder=\"ジャンル\"\n                ref={registerMovie}\n              />\n            </FormGroup>\n            <FormGroup>\n              <select\n                className=\"form-control\"\n                type=\"select\"\n                name=\"directorId\"\n                ref={registerMovie}\n              >\n                {data &&\n                  data.directors.map(({ id, name }) => (\n                    <option key={id} value={id}>\n                      {name}\n                    </option>\n                  ))}\n              </select>\n            </FormGroup>\n            <Button color=\"primary\" type=\"submit\">\n              追加\n            </Button>\n          </Form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default SideNav;\n","import React from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { MOVIE_LIST, DELETE_MOVIE } from '../queries/queries';\nimport { Button, Card, CardBody, Table } from 'reactstrap';\n\nconst MovieList = () => {\n  const { loading, error, data } = useQuery(MOVIE_LIST);\n  const [deleteMovie] = useMutation(DELETE_MOVIE, {\n    refetchQueries: [{ query: MOVIE_LIST }],\n    awaitRefetchQueries: true,\n  });\n  const handleDeleteMovie = (id) => deleteMovie({ variables: { id } });\n\n  return loading ? (\n    <p>Loading...</p>\n  ) : error ? (\n    <p>Error!</p>\n  ) : (\n    <Card>\n      <CardBody>\n        <Table hover>\n          <thead>\n            <tr>\n              <th>タイトル</th>\n              <th>ジャンル</th>\n              <th colSpan=\"2\">監督</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.movies.map(({ id, name, genre, director }) => (\n              <tr key={id}>\n                <td>{name}</td>\n                <td>{genre}</td>\n                <td>{director.name}</td>\n                <td>\n                  <Button color=\"primary\" onClick={() => handleDeleteMovie(id)}>\n                    削除\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default MovieList;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport { Col, Container, Row } from 'reactstrap';\nimport Header from './components/Header';\nimport SideNav from './components/SideNav';\nimport MovieList from './components/MovieList';\n\nconst client = new ApolloClient({\n  uri: 'https://node-graphql-react.firebaseapp.com/graphql',\n});\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <ApolloProvider client={client}>\n      <Container>\n        <Row>\n          <Col xs={12} sm={4}>\n            <SideNav />\n          </Col>\n          <Col xs={12} sm={8}>\n            <MovieList />\n          </Col>\n        </Row>\n      </Container>\n    </ApolloProvider>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}